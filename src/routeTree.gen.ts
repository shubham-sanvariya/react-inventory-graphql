/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as ProductsUpdateRouteImport } from './routes/products/update'
import { Route as ProductsProductRouteImport } from './routes/products/product'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsUpdateRoute = ProductsUpdateRouteImport.update({
  id: '/products/update',
  path: '/products/update',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsProductRoute = ProductsProductRouteImport.update({
  id: '/products/product',
  path: '/products/product',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products/product': typeof ProductsProductRoute
  '/products/update': typeof ProductsUpdateRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products/product': typeof ProductsProductRoute
  '/products/update': typeof ProductsUpdateRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/products/product': typeof ProductsProductRoute
  '/products/update': typeof ProductsUpdateRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/products/product' | '/products/update' | '/products'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/products/product' | '/products/update' | '/products'
  id: '__root__' | '/' | '/products/product' | '/products/update' | '/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsProductRoute: typeof ProductsProductRoute
  ProductsUpdateRoute: typeof ProductsUpdateRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/product': {
      id: '/products/product'
      path: '/products/product'
      fullPath: '/products/product'
      preLoaderRoute: typeof ProductsProductRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/update': {
      id: '/products/update'
      path: '/products/update'
      fullPath: '/products/update'
      preLoaderRoute: typeof ProductsUpdateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/products/product' {
  const createFileRoute: CreateFileRoute<
    '/products/product',
    FileRoutesByPath['/products/product']['parentRoute'],
    FileRoutesByPath['/products/product']['id'],
    FileRoutesByPath['/products/product']['path'],
    FileRoutesByPath['/products/product']['fullPath']
  >
}
declare module './routes/products/update' {
  const createFileRoute: CreateFileRoute<
    '/products/update',
    FileRoutesByPath['/products/update']['parentRoute'],
    FileRoutesByPath['/products/update']['id'],
    FileRoutesByPath['/products/update']['path'],
    FileRoutesByPath['/products/update']['fullPath']
  >
}
declare module './routes/products/index' {
  const createFileRoute: CreateFileRoute<
    '/products/',
    FileRoutesByPath['/products/']['parentRoute'],
    FileRoutesByPath['/products/']['id'],
    FileRoutesByPath['/products/']['path'],
    FileRoutesByPath['/products/']['fullPath']
  >
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsProductRoute: ProductsProductRoute,
  ProductsUpdateRoute: ProductsUpdateRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
